<?php

/**
 * This is the model base class for the table "User".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "User" available as properties of the model,
 * followed by relations of table "User" available as properties of the model.
 *
 * @property integer $UserId
 * @property string $UserType
 * @property string $FirstName
 * @property string $LastName
 * @property string $UserName
 * @property string $Email
 * @property string $Password
 * @property string $Gender
 * @property string $BirthDate
 * @property integer $CityId
 * @property integer $StateId
 * @property integer $CountryId
 * @property string $AccountVerified
 * @property string $InsertedDate
 * @property string $UpdatedDate
 * @property string $Status
 *
 * @property UserOtherDetails[] $userOtherDetails
 */
abstract class BaseUser extends CActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'User';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'User|Users', $n);
    }

    public static function representingColumn() {
        return 'UserType';
    }

    public function rules() {
        return array(
            array('FirstName, LastName, UserName, Email, Password, BirthDate, CityId, StateId, CountryId, InsertedDate, UpdatedDate, Status', 'required'),
            array('CityId, StateId, CountryId', 'numerical', 'integerOnly'=>true),
            array('UserType', 'length', 'max'=>10),
            array('FirstName, LastName', 'length', 'max'=>50),
            array('UserName, Email', 'length', 'max'=>100),
            array('Password', 'length', 'max'=>255),
            array('Gender', 'length', 'max'=>6),
            array('AccountVerified', 'length', 'max'=>3),
            array('Status', 'length', 'max'=>8),
            array('UserType, Gender, AccountVerified', 'default', 'setOnEmpty' => true, 'value' => null),
            array('UserId, UserType, FirstName, LastName, UserName, Email, Password, Gender, BirthDate, CityId, StateId, CountryId, AccountVerified, InsertedDate, UpdatedDate, Status', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'userOtherDetails' => array(self::HAS_MANY, 'UserOtherDetails', 'UserId'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'UserId' => Yii::t('app', 'User'),
            'UserType' => Yii::t('app', 'User Type'),
            'FirstName' => Yii::t('app', 'First Name'),
            'LastName' => Yii::t('app', 'Last Name'),
            'UserName' => Yii::t('app', 'User Name'),
            'Email' => Yii::t('app', 'Email'),
            'Password' => Yii::t('app', 'Password'),
            'Gender' => Yii::t('app', 'Gender'),
            'BirthDate' => Yii::t('app', 'Birth Date'),
            'CityId' => Yii::t('app', 'City'),
            'StateId' => Yii::t('app', 'State'),
            'CountryId' => Yii::t('app', 'Country'),
            'AccountVerified' => Yii::t('app', 'Account Verified'),
            'InsertedDate' => Yii::t('app', 'Inserted Date'),
            'UpdatedDate' => Yii::t('app', 'Updated Date'),
            'Status' => Yii::t('app', 'Status'),
            'userOtherDetails' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('UserId', $this->UserId);
        $criteria->compare('UserType', $this->UserType, true);
        $criteria->compare('FirstName', $this->FirstName, true);
        $criteria->compare('LastName', $this->LastName, true);
        $criteria->compare('UserName', $this->UserName, true);
        $criteria->compare('Email', $this->Email, true);
        $criteria->compare('Password', $this->Password, true);
        $criteria->compare('Gender', $this->Gender, true);
        $criteria->compare('BirthDate', $this->BirthDate, true);
        $criteria->compare('CityId', $this->CityId);
        $criteria->compare('StateId', $this->StateId);
        $criteria->compare('CountryId', $this->CountryId);
        $criteria->compare('AccountVerified', $this->AccountVerified, true);
        $criteria->compare('InsertedDate', $this->InsertedDate, true);
        $criteria->compare('UpdatedDate', $this->UpdatedDate, true);
        $criteria->compare('Status', $this->Status, true);
        
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }
}